'Auto control version

'Assign events
GraphicsWindow.KeyDown = OnKeyDown
GraphicsWindow.KeyUp = OnKeyUp
LDGraphicsWindow.ExitOnClose = "False"
LDGraphicsWindow.Closing = OnClosing

'Read in the server connection string (may need to read it from a network file or enter manually)
server = File.ReadLine(Program.Directory+"\server.txt",1)
LDClient.Connect(server,"True")
'Ensure connection is fully established before continuing
While (thisClient = "")
  thisClient = LDClient.Name
  Program.Delay(10)
EndWhile

Initialise()

'==================================================
'GAME LOOP
'==================================================
While ("True")
  start = Clock.ElapsedMilliseconds
  
  UpdateGame()
  
  delay = 20-(Clock.ElapsedMilliseconds-start)
  If (delay > 0) Then
    Program.Delay(delay)
  EndIf
EndWhile

'==================================================
'EVENT SUBROUTINES
'==================================================
Sub OnKeyDown
  key = GraphicsWindow.LastKey
  keys[key] = "True"
EndSub

Sub OnKeyUp
  key = GraphicsWindow.LastKey
  keys[key] = "False"
EndSub

Sub OnClosing
  EndClient()
EndSub

'==================================================
'SUBROUTINES
'==================================================
Sub Initialise
  gw = 600
  gh = 600
  GraphicsWindow.Width = gw
  GraphicsWindow.Height = gh
  velX = 0
  velY = 0
  radius = 20
  
  GraphicsWindow.Title = thisClient
  'Dynamic Data
  allClientData[thisClient]["X"] = 100+Math.GetRandomNumber(gw-200)
  allClientData[thisClient]["Y"] = 100+Math.GetRandomNumber(gh-200)
  'Static Data
  allClientBasicData[thisClient]["Col"] = GraphicsWindow.GetRandomColor()
  allClientBasicData = LDClient.UpdateStatic(allClientBasicData[thisClient])
EndSub

Sub UpdateGame
  'Check for end
  If (keys["Escape"]) Then
    EndClient()
  EndIf
  'Refresh
  If (keys["R"]) Then
    indices = Array.GetAllIndices(blocks)
    For i = 1 To Array.GetItemCount(indices)
      Shapes.Remove(blocks[indices[i]])
    EndFor
    blocks = ""
  EndIf
  'Update this client
  clientData = allClientData[thisClient]
  If (keys["Left"]) Then
    velX = velX-0.1
  ElseIf (keys["Right"]) Then
    velX = velX+0.1
  EndIf
  If (keys["Up"]) Then
    velY = velY-0.1
  ElseIf (keys["Down"]) Then
    velY = velY+0.1
  EndIf
  If (keys["Space"]) Then
    velX = 0
    velY = 0
  EndIf
  clientData["X"] = clientData["X"]+velX
  clientData["Y"] = clientData["Y"]+velY
  If (clientData["X"] < radius) Then
    velX = -velX
    clientData["X"] = radius
  EndIf
  If (clientData["X"] > gw-radius) Then
    velX = -velX
    clientData["X"] = gw-radius
  EndIf
  If (clientData["Y"] < radius) Then
    velY = -velY
    clientData["Y"] = radius
  EndIf
  If (clientData["Y"] > gh-radius) Then
    velY = -velY
    clientData["Y"] = gh-radius
  EndIf
  
  'Update to other clients if anything changed and also get other client updates
  allClientData = LDClient.UpdateDynamic(clientData)
  'Update the basic data if number of clients has changed
  If (Array.GetItemCount(allClientData) <> Array.GetItemCount(blocks)) Then
    allClientBasicData = LDClient.UpdateStatic(allClientBasicData[thisClient])
  EndIf
  
  'Create if required and move all clients
  clients = Array.GetAllIndices(allClientData)
  blocksCopy = blocks 'To identify removed clients
  For i = 1 To Array.GetItemCount(clients)
    client = clients[i]
    clientData = allClientData[client]
    blocksCopy[client] = ""
    If (blocks[client] = "") Then
      GraphicsWindow.BrushColor = "Black"
      blocks[client] = Shapes.AddText(Text.GetSubTextToEnd(client,7))
      GraphicsWindow.BrushColor = allClientBasicData[client]["Col"]
      Shapes.SetOpacity(blocks[client],75)
      Controls.SetSize(blocks[client],2*radius,2*radius)
      LDShapes.BrushColour(blocks[client],GraphicsWindow.BrushColor)
    EndIf
    Shapes.Move(blocks[client],clientData["X"]-radius,clientData["Y"]-radius)
  EndFor
  
  'Delete any unused clients
  clients = Array.GetAllIndices(blocksCopy)
  For i = 1 To Array.GetItemCount(clients)
    client = clients[i]
    Shapes.Remove(blocksCopy[client])
    blocks[client] = ""
  EndFor
EndSub

Sub EndClient
  LDClient.Disconnect()
  Program.End()
EndSub